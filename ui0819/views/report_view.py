import streamlit as st
from views.login_view import show_login_page
from services.db_service import get_db_modules,get_reports
from services.model_service import get_model_modules
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
import streamlit.components.v1 as components
import tempfile
import os
from utils.style_utils import create_evaluation_table_html
from pathlib import Path


def show_main_interface(patient_id,df):
    if st.button("< Îí§Î°úÍ∞ÄÍ∏∞"):
        st.session_state.view_mode = "list"
        st.rerun()
    # ÏÇ¨Ïù¥ÎìúÎ∞î
    with st.sidebar:
        st.title("üëã CLAP")
        # Î©îÎâ¥: ÏûàÏñ¥Ïïº Ìï†Íπå?
        st.divider()
        menu_items = ["ÌèâÍ∞Ä", "Ïû¨Ìôú", "Î¶¨Ìè¨Ìä∏"]
        for item in menu_items:
            prefix = "üü° " if item == st.session_state.current_page else ""
            button_type = "primary" if item == st.session_state.current_page else "secondary"
            if st.button(f"{prefix}{item}", key=f"menu_{item}", type=button_type, use_container_width=True):
                st.session_state.current_page = item
                st.session_state.view_mode = "list"
                if item != "Î¶¨Ìè¨Ìä∏":
                    st.info(f"{item} Í∏∞Îä•ÏùÄ Í∞úÎ∞ú Ï§ëÏûÖÎãàÎã§.")
                st.rerun()
        st.divider()     
        # if not patient_info.empty:
            # Ï¥àÍ∏∞Í∞í ÏÑ§Ï†ï
        if 'selected_filter' not in st.session_state:
            st.session_state.selected_filter = "CLAP_A"
        patient_info=get_reports(patient_id)
        if patient_info is not None:
            st.write(f"**{patient_info['PATIENT_NAME'].iloc[0]} {patient_info['AGE'].iloc[0]}ÏÑ∏**")
            st.write(f"ÌôòÏûêÎ≤àÌò∏: {patient_info['PATIENT_ID'].iloc[0]}")
            st.write(f"ÏÑ±Î≥Ñ: {'Ïó¨ÏÑ±' if patient_info['SEX'].iloc[0]==1 else 'ÎÇ®ÏÑ±'}")
        else:
            st.write("ÌôòÏûê Ï†ïÎ≥¥Î•º Îì±Î°ùÌïòÎ©¥ Ïó¨Í∏∞ ÌëúÏãúÎê©ÎãàÎã§")
        st.divider()     
        
        # Î°úÍ∑∏ÏïÑÏõÉ Î≤ÑÌäº
        if st.button("Î°úÍ∑∏ÏïÑÏõÉ", key="logout", use_container_width=True):
            st.session_state.logged_in = False
            st.session_state.user_info = None
            st.rerun()
        # ÌååÏùº Í≤ΩÎ°ú
        # save_dir = df['MAIN_PATH']
        # print('\n\n\n',save_dir)

    if 'upload_completed' in st.session_state:
        # model_comm, report_main = get_db_modules()
        # ÌååÏùº Í≤ΩÎ°úÏôÄ Î™©Î°ù Ï†ïÎ≥¥Î•º Ï°∞Ìöå
        ret = df[['MAIN_PATH','SUB_PATH','FILE_NAME']]
        ah_sound_path=[]
        ptk_sound_path=[]
        ltn_rpt_path=[]
        guess_end_path=[]
        read_clean_path=[]
        say_ani_path=[]
        say_obj_path=[]
        talk_clean_path=[]
        talk_pic_path=[]
        for i in range(len(ret)):
            main_path = str(ret.loc[i, 'MAIN_PATH'])
            sub_path = str(ret.loc[i, 'SUB_PATH'])
            filename = str(ret.loc[i, 'FILE_NAME'])
            
            # upload_folder Í∏∞Ï§ÄÏúºÎ°ú Í≤ΩÎ°ú Íµ¨ÏÑ±: upload_folder / main_path / sub_path / filename
            file_path = Path(__file__).parent.parent.parent / "upload" / "files" / main_path / sub_path.upper() / filename


            # ÌïÑÏöîÌïòÎã§Î©¥ Î¨∏ÏûêÏó¥Î°ú Î≥ÄÌôò
            file_path = str(file_path)
            print(file_path)
            print("--------------------- file_path ---------------------\n\n\n")
                # ÌååÏùº Ï°¥Ïû¨ Ïó¨Î∂Ä ÌôïÏù∏
            if not os.path.exists(file_path):
                st.warning(f"‚ùå ÌååÏùº ÏóÜÏùå: {file_path}")
                break
            
            t = file_path
            # print(f"ÏµúÏ¢Ö Í≤ΩÎ°ú: {t}")
            print("--------------------- t ---------------------\n\n\n")
            sub_path_parts = Path(sub_path).parts
            if sub_path_parts[0].lower() == 'clap_d':
                talk_pic, ah_sound, ptk_sound, talk_clean, say_ani = get_model_modules()
                
                if sub_path_parts[1] == '0':
                    ah_sound_path.append(t)
                    # print(ah_sound_path)
                    # print(ah_sound.analyze_pitch_stability(ah_sound_path[0]))
                    if 'ah_sound_result' not in st.session_state:
                        # talk_pic, ah_sound, ptk_sound, talk_clean = get_model_modules()
                        st.session_state.ah_sound_result=ah_sound.analyze_pitch_stability(ah_sound_path[0])
                        # print('-------------- ah_sound modeling(1Î≤àÏß∏ Í∞í) ---------------\n\n\n')

                elif sub_path_parts[1] == '1':
                    ptk_sound_path.append(t)
                    if 'ptk_sound_result' not in st.session_state:
                        # talk_pic, ah_sound, ptk_sound, talk_clean = get_model_modules()
                        st.session_state.ptk_sound_result=ptk_sound.count_peaks_from_waveform(ptk_sound_path[0])
                    # print('-------------- ptk_sound modeling(1Î≤àÏß∏ Í∞í) ---------------\n\n\n')
                elif sub_path_parts[1] == '2':
                    talk_clean_path.append(t)
                    if 'talk_clean_result' not in st.session_state:
                        # talk_pic, ah_sound, ptk_sound, talk_clean = get_model_modules()
                        st.session_state.talk_clean_result=talk_clean.main(talk_clean_path[0])
                    # print('-------------- talk_clean modeling(1Î≤àÏß∏ Í∞í) ---------------\n\n\n')
                elif sub_path_parts[1] == '3':
                    read_clean_path.append(t)
                # elseÎèÑ Í≥†Î†§?

            # aÏùºÎïå
            elif sub_path_parts[0].lower() == 'clap_a':
                if sub_path_parts[1] == '3':
                    ltn_rpt_path.append(t)
                elif sub_path_parts[1] == '4':
                    guess_end_path.append(t)
                elif sub_path_parts[1] == '5':
                    say_obj_path.append(t)
                elif sub_path_parts[1] == '6':
                    say_ani_path.append(t)
                    if 'say_ani_result' not in st.session_state:
                        # talk_pic, ah_sound, ptk_sound, talk_clean = get_model_modules()
                        st.session_state.say_ani_result=say_ani.score_audio(say_ani_path[0])
                elif sub_path_parts[1] == '7':
                    talk_pic_path.append(t)
                    if 'talk_pic_result' not in st.session_state:
                        # talk_pic, ah_sound, ptk_sound, talk_clean = get_model_modules()
                        st.session_state.talk_pic_result=talk_pic.score_audio(talk_pic_path[0])
                    # print('-------------- talk_pic modeling(1Î≤àÏß∏ Í∞í) ---------------\n\n\n')
                    talk_pic_path.append(t)


        if st.session_state.view_mode == "list":
            show_report_page(patient_info['PATIENT_ID'].iloc[0] if not patient_info.empty else '')
        elif st.session_state.view_mode == "clap_a_detail":
            show_clap_a_detail()
        elif st.session_state.view_mode == "clap_d_detail":
            show_clap_d_detail()
            # ÌôòÏûê Ï†ïÎ≥¥ ÌëúÏãú
            st.divider()
    else:
        st.info("zipÌååÏùºÍ≥º ÌôòÏûê Î≤àÌò∏Î•º Î™®Îëê ÏÑ†ÌÉùÌï¥ Ï£ºÏÑ∏Ïöî")
        # patient_info_str = 'ÏÑ†ÌÉù'
        # patient_info=all_patient_info[all_patient_info['patient_id']==patient_info_str]



def show_report_page(patient_id):

    # st.header("Î¶¨Ìè¨Ìä∏")
    
    # ÌÉ≠ Î≤ÑÌäºÎì§
    col1, col2, col3 = st.columns([2, 2, 6])
    
    with col1:
        if st.button("CLAP-A", key="clap_a_btn", type="primary" if st.session_state.selected_filter == "CLAP_A" else "secondary", disabled=False):
            st.session_state.selected_filter = "CLAP_A"
            st.rerun()
    
    with col2:
        if st.button("CLAP-D", key="clap_d_btn", type="primary" if st.session_state.selected_filter == "CLAP_D" else "secondary", disabled=False):
            st.session_state.selected_filter = "CLAP_D"
            st.rerun()
    
    # Î¶¨Ìè¨Ìä∏ Î™©Î°ù
    model_comm, report_main = get_db_modules()
    msg, reports_df = report_main.get_report_main(patient_id, st.session_state.selected_filter)

    if not reports_df.empty:
        for idx, row in reports_df.iterrows():
            with st.container():
                col1, col2, col3, col4, col5,col6,col7 = st.columns([0.5, 2, 3,2,2, 0.5, 2])
                
                with col1:
                    st.checkbox("", key=f"checkbox_{idx}")
                
                with col2:
                    st.markdown(
                        f"<div style='line-height: 1.8; font-size: 25px;'><b>{row['ASSESS_TYPE'].replace('_','-')}</b></div>",
                        unsafe_allow_html=True
                    )
                with col3:
                    st.markdown(
                        f"<div style='line-height: 1.8; font-size: 20px;'>Í≤ÄÏÇ¨ÏùºÏûê <b>{row['ASSESS_DATE']}</b></div>",
                        unsafe_allow_html=True
                    )
                with col4:
                    st.markdown(
                        f"<div style='line-height: 1.8; font-size: 20px;'>ÏùòÎ¢∞Ïù∏ <b>{row['REQUEST_ORG']}</b></div>",
                        unsafe_allow_html=True
                    )                    
                with col5:
                    st.markdown(
                        f"<div style='line-height: 1.8; font-size: 20px;'>Í≤ÄÏÇ¨Ïûê <b>{row['ASSESS_PERSON']}</b></div>",
                        unsafe_allow_html=True
                    )                    
                with col7:
                    if st.button("ÌôïÏù∏ÌïòÍ∏∞ „Äâ", key=f"confirm_{idx}"):
                        st.session_state.selected_report = {
                            'type': row['ASSESS_TYPE'],
                            'date': row['ASSESS_DATE'],
                            'patient_id': row['PATIENT_ID'],
                            'order_num': row['ORDER_NUM']
                        }
                        if row['ASSESS_TYPE'] == "CLAP_A":
                            st.session_state.view_mode = "clap_a_detail"
                        else:
                            st.session_state.view_mode = "clap_d_detail"
                        st.rerun()
                
                st.divider()
    else:
        st.info(f"{st.session_state.selected_filter} Í≤ÄÏÇ¨ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.")


def show_detail_common():
    st.header(st.session_state.selected_filter.replace('_','-'))
    st.subheader(f"Ï†ÑÏÇ∞Ìôî Ïñ∏Ïñ¥ Í∏∞Îä• ÏÑ†Î≥Ñ Í≤ÄÏÇ¨({'Ïã§Ïñ¥Ï¶ù' if st.session_state.selected_filter=='CLAP_A' else 'ÎßàÎπÑÎßêÏû•Ïï†' if st.session_state.selected_filter=='CLAP_D' else ''}) Í≤∞Í≥ºÏßÄ")

    # Î¶¨Ìè¨Ìä∏ ÏÉÅÏÑ∏ Í∞ÄÏ†∏Ïò§Í∏∞
    model_comm, report_main = get_db_modules()
    msg, patient_detail = report_main.get_patient_info(st.session_state.selected_report['patient_id'],st.session_state.selected_report['order_num'])
    # report = st.session_state.selected_report
    # patient_detail = reports_df.get_patient_info(reports_df['patient_id']).iloc[0]
    # print(patient_info)
    # print("--------------------- patient_info ---------------------\n\n\n")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.write(f"ÏùòÎ¢∞ Í∏∞Í¥Ä(Í≥º)/ÏùòÎ¢∞Ïù∏ {patient_detail['REQUEST_ORG'][0]}")
        st.write(f"Ïù¥Î¶Ñ {patient_detail['PATIENT_NAME'][0]} ")
        st.write(f"ÍµêÏú°Ïó∞Ïàò {patient_detail['EDU'][0]}ÎÖÑ")
        st.write(f"Î∞©Ïñ∏ NN")

    with col2:
        st.write(f"Í≤ÄÏÇ¨ÏûêÎ™Ö {patient_detail['ASSESS_PERSON'][0]}")
        st.write(f"ÏÑ±Î≥Ñ {'Ïó¨Ïûê' if patient_detail['SEX'][0]==1 else 'ÎÇ®Ïûê'}")
        st.write(f"Î¨∏Ìï¥Ïó¨Î∂Ä NN")
        st.write(f"Î∞úÎ≥ëÏùº {patient_detail['POST_STROKE_DATE'][0]}")

    with col3:
        st.write(f"Í≤ÄÏÇ¨ÏùºÏûê {patient_detail['ASSESS_DATE'][0]} ")
        st.write(f"Í∞úÏù∏Î≤àÌò∏ {patient_detail['PATIENT_ID'][0]}")

    st.write(f"ÏßÑÎã®Î™Ö {patient_detail['STROKE_TYPE'][0]}")
    st.write(f"Ï£ºÏöî ÎáåÎ≥ëÎ≥Ä I {patient_detail['DIAGNOSIS'][0]}")
    st.write(f"Ï£ºÏöî ÎáåÎ≥ëÎ≥Ä II {patient_detail['DIAGNOSIS_ETC'][0]}")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.write(f"**Ìé∏ÎßàÎπÑ** {patient_detail['HEMIPLEGIA'][0]}")
    with col2:
        st.write(f"**Î¨¥ÏãúÏ¶ù** {patient_detail['HEMINEGLECT'][0]}")
    with col3:
        st.write(f"**ÏãúÏïºÍ≤∞ÏÜê** {patient_detail['VISUAL_FIELD_DEFECT'][0]}")

    st.write(f"**Í∏∞ÌÉÄ ÌäπÏù¥ÏÇ¨Ìï≠** ")
    st.divider()



def show_clap_a_detail():
    show_detail_common()
    # Î¶¨Ìè¨Ìä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    report = st.session_state.selected_report
    clap_a_data = get_reports(report['patient_id'], 'CLAP_A')
    
    # Í≤ÄÏÇ¨ Í≤∞Í≥º
    if not clap_a_data.empty:
        st.subheader("Í≤∞Í≥º ÏöîÏïΩ")
        st.write('Í∑∏Î¶ºÎ≥¥Í≥† ÎßêÌïòÍ∏∞:',st.session_state.talk_pic_result,'Ï†ê')
        st.write('ÎèôÎ¨º Ïù¥Î¶Ñ ÎßêÌïòÍ∏∞:',st.session_state.say_ani_result,'Ï†ê')
        # Ï∞®Ìä∏


def show_clap_d_detail():
    """CLAP-D ÏÉÅÏÑ∏ Î¶¨Ìè¨Ìä∏ ÌéòÏù¥ÏßÄ"""
    show_detail_common()
    report = st.session_state.selected_report
    clap_d_data = get_reports(report['patient_id'], 'CLAP_D')

    # Í≤ÄÏÇ¨ Í≤∞Í≥º

    if not clap_d_data.empty:
        st.subheader("Í≤∞Í≥º ÏöîÏïΩ")

        st.write('ÏïÑ ÏÜåÎ¶¨ÎÇ¥Í∏∞:',st.session_state.ah_sound_result)
        st.write('ÌçºÌÑ∞Ïª§ ÏÜåÎ¶¨ÎÇ¥Í∏∞:',st.session_state.ptk_sound_result)
        st.write('ÎòêÎ∞ïÎòêÎ∞ï ÎßêÌïòÍ∏∞:',st.session_state.talk_clean_result)
        word_level,sentence_level,consonant_word,vowel_word,consonant_sentence='N','N','N','N','N'
        max_time,pa_avg,ta_avg,ka_avg,ptk_avg='N','N','N','N','N'
        total_score = 'N'
        # total_score = a_sound + pa_repeat + ta_repeat + ka_repeat + ptk_repeat + word_level + sentence_level

        # ----------------------  ÏûÑÏãú DB   ----------------
        evaluation_data = [
            {
                'id': 'a_sound',
                'title': "'ÏïÑ' ÏÜåÎ¶¨ÎÇ¥Í∏∞",
                'summary': "ÏµúÎåÄ Î∞úÏÑ± ÏãúÍ∞Ñ NN Ï¥à Ï¥ùÏ†ê NN Ï†ê",
                'items': [
                    {'no': 'Ïó∞Ïäµ', 'content': "'ÏïÑ'"},
                    {'no': '1', 'content': "1ÌöåÏ∞® 'ÏïÑ'"},
                    {'no': '', 'content': "2ÌöåÏ∞® 'ÏïÑ'"}
                ]
            },
            {
                'id': 'pa_sound',
                'title': "'Ìçº' Î∞òÎ≥µÌïòÍ∏∞",
                'summary': "ÌèâÍ∑† ÌöüÏàò NN Î≤à Ï¥ùÏ†ê NN Ï†ê",
                'items': [
                    {'no': 'Ïó∞Ïäµ', 'content': "'Ìçº'"},
                    {'no': '1', 'content': "1ÌöåÏ∞® 'Ìçº'"},
                    {'no': '', 'content': "2ÌöåÏ∞® 'Ìçº'"},
                    {'no': '', 'content': "3ÌöåÏ∞® 'Ìçº'"}
                ]
            },
            {
                'id': 'ta_sound',
                'title': "'ÌÑ∞' Î∞òÎ≥µÌïòÍ∏∞",
                'summary': "ÌèâÍ∑† ÌöüÏàò NN Î≤à Ï¥ùÏ†ê NN Ï†ê",
                'items': [
                    {'no': 'Ïó∞Ïäµ', 'content': "'ÌÑ∞'"},
                    {'no': '1', 'content': "1ÌöåÏ∞® 'ÌÑ∞'"},
                    {'no': '', 'content': "2ÌöåÏ∞® 'ÌÑ∞'"},
                    {'no': '', 'content': "3ÌöåÏ∞® 'ÌÑ∞'"}
                ]
            },
            {
                'id': 'ka_sound',
                'title': "'Ïª§' Î∞òÎ≥µÌïòÍ∏∞",
                'summary': "ÌèâÍ∑† ÌöüÏàò NN Î≤à Ï¥ùÏ†ê NN Ï†ê",
                'items': [
                    {'no': 'Ïó∞Ïäµ', 'content': "'Ïª§'"},
                    {'no': '1', 'content': "1ÌöåÏ∞® 'Ïª§'"},
                    {'no': '', 'content': "2ÌöåÏ∞® 'Ïª§'"},
                    {'no': '', 'content': "3ÌöåÏ∞® 'Ïª§'"}
                ]
            },
            {
                'id': 'ptk_sound',
                'title': "'ÌçºÌÑ∞Ïª§' Î∞òÎ≥µÌïòÍ∏∞",
                'summary': "ÌèâÍ∑† ÌöüÏàò NN Î≤à Ï¥ùÏ†ê NN Ï†ê",
                'items': [
                    {'no': 'Ïó∞Ïäµ', 'content': "'ÌçºÌÑ∞Ïª§'"},
                    {'no': '1', 'content': "1ÌöåÏ∞® 'ÌçºÌÑ∞Ïª§'"},
                    {'no': '', 'content': "2ÌöåÏ∞® 'ÌçºÌÑ∞Ïª§'"},
                    {'no': '', 'content': "3ÌöåÏ∞® 'ÌçºÌÑ∞Ïª§'"}
                ]
            }
        ]
        # --------------------------------------
        
        # ÌèâÍ∞Ä Î¶¨Ïä§Ìä∏
        a_sound, pa_sound, ta_sound, ka_sound, ptk_sound = evaluation_data
        
        evaluation_list = [a_sound, pa_sound, ta_sound, ka_sound, ptk_sound]

        # forÎ¨∏ÏúºÎ°ú Í∞Å ÌèâÍ∞Ä ÌÖåÏù¥Î∏î ÏÉùÏÑ±
        for eval_item in evaluation_list:
            html_content = create_evaluation_table_html(eval_item)
            # st.components.v1.html ÏÇ¨Ïö© - ÎÜíÏù¥Îäî Ìï≠Î™© ÏàòÏóê Îî∞Îùº ÎèôÏ†ÅÏúºÎ°ú Í≥ÑÏÇ∞
            height = 150 + (len(eval_item['items']) * 35)  # Í∏∞Î≥∏ ÎÜíÏù¥ + Í∞Å ÌñâÎãπ 35px
            components.html(html_content, height=height)