@startuml ui_diagram
title CLAP 시스템 UML 시퀀스 다이어그램

actor User as u
participant "app.py" as app
participant "login_view.py" as login
participant "auth_service.py" as auth
participant "upload_service.py" as upload
participant "report_view.py" as report
participant "db_service.py" as db
participant "model_service.py" as model
participant "DB" as database
participant "Models" as aimodels

note over u, aimodels : CLAP (전산화 언어 기능 선별 검사) 시스템

== 시스템 시작 ==
u -> app : 애플리케이션 실행
app -> app : 환경 설정 및 라이브러리 초기화
app -> login : show_login_page() 호출

== 로그인 프로세스 ==
login -> u : 로그인 페이지 표시 (ID/PW 입력 폼)
u -> login : ID, Password 입력 후 로그인 버튼 클릭
login -> auth : authenticate_user(user_id, password)
auth --> login : 인증 결과 반환
alt 로그인 성공
    login -> app : session_state.logged_in = True 설정
    app -> app : 메인 인터페이스로 전환
else 로그인 실패
    login -> u : 에러 메시지 표시
end

== 환자 선택 및 파일 업로드 ==
app -> u : 환자 ID 선택 및 ZIP 파일 업로드 인터페이스 표시
u -> app : 환자 ID 선택
u -> app : ZIP 파일 업로드

alt 파일 업로드 선택
    app -> upload : zip_upload(btn_apply, patient_id, uploaded_file)
    upload -> upload : ZIP 파일 압축 해제
    upload -> upload : 폴더명 변경 (타임스탬프 추가)
    upload -> upload : 업로드 폴더로 이동
    upload -> database : DB 연결 생성
    upload -> database : 환자 정보 저장 (assess_lst)
    upload -> database : 파일 정보 저장 (assess_file_lst)
    upload -> database : 점수 테이블 초기화 (assess_score)
    upload --> app : order_num, path_info 반환
else 업로드 스킵
    app -> database : 기존 환자 데이터 조회
    database --> app : 환자 경로 정보 반환
end

app -> app : upload_completed = True 설정
app -> report : show_main_interface() 호출

== 메인 인터페이스 ==
report -> u : 사이드바 (메뉴, 환자정보) 표시
report -> db : get_reports(patient_id) 호출
db -> database : 환자 정보 조회
database --> db : 환자 정보 반환
db --> report : 환자 정보 반환
report -> u : 환자 정보 표시

== 리포트 페이지 ==
report -> u : CLAP-A/CLAP-D 탭 버튼 표시
u -> report : CLAP-A 또는 CLAP-D 선택
report -> db : get_assess_lst() 호출
db -> database : 검사 목록 조회
database --> db : 검사 목록 반환
db --> report : 검사 목록 반환
report -> u : 검사 목록 표시

u -> report : 특정 검사 "확인하기" 버튼 클릭
report -> report : view_mode 변경 및 모델 처리 시작

== 모델 처리 (CLAP-A) ==
alt CLAP-A 검사인 경우
    report -> report : model_process(path_info) 호출
    report -> model : get_ltn_rpt() - 듣고 따라 말하기
    model -> aimodels : ltn_rpt.predict_score()
    aimodels --> model : 점수 반환
    model --> report : LTN_RPT 점수
    
    report -> model : get_guess_end() - 끝말 맞추기
    model -> aimodels : guess_end.predict_guess_end()
    aimodels --> model : 점수 반환
    model --> report : GUESS_END 점수
    
    report -> model : get_say_obj() - 물건 이름 말하기
    model -> aimodels : say_obj.predict_total_say_obj()
    aimodels --> model : 점수 반환
    model --> report : SAY_OBJ 점수
    
    report -> model : get_say_ani() - 동물 이름 말하기
    model -> aimodels : say_ani.score_audio()
    aimodels --> model : 점수 반환
    model --> report : SAY_ANI 점수
    
    report -> model : get_talk_pic() - 그림 보고 이야기하기
    model -> aimodels : talk_pic.score_audio()
    aimodels --> model : 점수 반환
    model --> report : TALK_PIC 점수
end

== 모델 처리 (CLAP-D) ==
alt CLAP-D 검사인 경우
    report -> model : get_ah_sound() - '아' 소리내기
    model -> aimodels : ah_sound.analyze_pitch_stability()
    aimodels --> model : 점수 반환
    model --> report : AH_SOUND 점수
    
    report -> model : get_ptk_sound() - '퍼터커' 반복하기
    model -> aimodels : ptk_sound.count_peaks_from_waveform()
    aimodels --> model : 각 음성별 점수 반환
    model --> report : P_SOUND, T_SOUND, K_SOUND, PTK_SOUND 점수
    
    report -> model : get_talk_clean() - 또박또박 말하기
    model -> aimodels : talk_clean.main()
    aimodels --> model : 점수 반환
    model --> report : TALK_CLEAN 점수
end

== 결과 표시 ==
report -> report : 모든 모델 점수 수집 완료
report -> u : 검사 결과 표시

alt CLAP-A 결과
    report -> u : 실어증 검사 결과 테이블 표시
    note right : - 듣고 따라 말하기\n- 끝말 맞추기\n- 물건/동물 이름 말하기\n- 그림 보고 이야기하기
else CLAP-D 결과
    report -> u : 마비말장애 검사 결과 테이블 표시
    note right : - '아' 소리내기\n- '퍼터커' 반복하기\n- 또박또박 말하기
end

== 기존 검사 결과 조회 ==
alt 기존 검사 결과 확인
    u -> report : 기존 검사 "확인하기" 클릭
    report -> db : get_assess_score() 호출
    db -> database : 저장된 점수 조회
    database --> db : 점수 데이터 반환
    db --> report : 점수 데이터 반환
    report -> u : 저장된 검사 결과 표시
end

== 로그아웃 ==
u -> report : 로그아웃 버튼 클릭
report -> app : session_state.clear()
app -> login : 로그인 페이지로 리다이렉트

@enduml